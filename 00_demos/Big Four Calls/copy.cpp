#include <iostream>

class A
{
public:
	A()
	{
		std::cout << "A() ";
	}

	A(const A& other)
	{
		std::cout << "Acpy() ";

	}
};

class B
{
public:
	B()
	{
		std::cout << "B() ";
	}

	B(const B& other)
	{
		std::cout << "Bcpy() ";

	}
};

class T
{
	A a;
	A* a2;
	B b;

public:
	T() 
	{
		std::cout << "T() ";

	}

	T(const T & other): a(other.a) //при копиращия конструктор преди да влезе в тялото,
								   //както при всеки друг конструктор, член-данните трябва да се инициализират
		                           //=> първото нещо, което ще направи в този сценарии е да копира [other.a] в t[this->a] => Acpy()

								   //тъй като не сме казали как да инициализира [b], то тогава ще се извика default-ният конструктор на [b] (по подразбиране)

								   //вече видяхме защо при [a2] няма да се случи нищо (пойнтър към обект, а не обект!)

	{
		this->b = other.b;


		std::cout << "Tcpy() ";

	}
};

void f(T copy) //тъй като приемаме по копие,
               //това ще извика копиращия конструктор,
{              //където copy - this, t1 - other
	;
}

void f2(T& copy)
{
	;
}

void f3(T* copy)
{
	;
}

void f4(T copy)
{
	;
}

int main()
{
	T t1;
	std::cout << std::endl;
	std::cout << std::endl;

	f(t1);
	std::cout << std::endl;
	std::cout << std::endl;
	
	//при предаване по референция, де факто работим със същия обект,
	//следователно няма да направи нищо, тъй като ние вече го имаме
	//(работим директно с обекта)
	f2(t1);


	//подобно на референциите при предаване по пойнтър, предаваме адреса на оригиналния обект,
	//това означава, че функцията има достъп до обекта през неговия адрес
	//(работич директно с обекта)
	f3(&t1); 
	
	//допълнение към конструктори
	f4({}); //това създава временен обект от типа, който функцията приема,
	        //=> ще се извикат default-ните конструктори A() B() T()
			    //тъй като има Copy Elision оптимизация, което е обратното на RVO 
			    //(при подаване вместо при връщане)
		     	//то ще се спести копиращия конструктор на T(); който по принцип трябва да се извика с
	        //this - copy, other - {}

	return 0;

} 
