#pragma once
#include <iostream>

//интерфейс (имплементация)
//обещаваме, че всички член-функции ще бъдат
//намерени по време на Linking-a
class Cities
{
private:
	char* name = nullptr;
	int population = 0;
	char* country = nullptr;

	char* copy(const char* copyFrom);
	void free();
	void copyFrom(const Cities& other);

public:

	Cities() = default; //ще използваме default-ните стойности на член-данните
	Cities(const char* name, int population, const char* country);


	const char* getName() const;	  //напомняме, че връщаме const при селектори (getter-и)
	int getPopulation() const;        //винаги, когато НЕ връщаме примитивен тип
	const char* getCountry() const;   //също винаги слагаме const след параметрите на функцията,
									  //тъй като това дава обещание, че данните няма да бъдат променени
									  //в рамките на функцията (което винаги е така при гетърите, тъй като в тях
									  //единствено връщаме дадена член-данна)
												
											  //тук правим валидациите за валидни данни и се грижим за тяхното запазване
	void setName(const char* name);           //напомняме, че мутаторите (сетовете) са void или bool (ако искаме да връщаме
	void setPopulation(int population);	      //дали присвояването на името например е извършено успешно)
	void setCountry(const char* country);     //параметрите са КОНСТАНТНИ винаги, когато НЕ са примитивен тип
											  //също не слагаме const след параметрите на функцията,
											  //тъй като това дава обещание, че данните НЯМА да бъдат променени
											  //в рамките на функцията, а ние искаме точно това (да ги променим)
											  
	
	Cities(const Cities& other);             //ще е необходимо да пренапишем копиращия конструктор, тъй като ще имаме динамично заделени член-данни,
	Cities& operator=(const Cities& other);	 //с които default-ният не може да се справи, 
											 //поради същата причина ще трябва да пренапишем и оператора за присвояване
	
	~Cities(); //ще е необходимо да пренапишем деструктора, тъй като ще имаме 
			//динамично заделени член-данни, чиято памет трябва да освободим


};
